{"version":3,"sources":["webpack:///./docs/libraries/overriding.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---docs-libraries-overriding-md-c3bf7103e192f5616551.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/tanka/tanka/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"overriding-vendor\"\n    }}>{`Overriding vendor`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`vendor`}</inlineCode>{` directory is immutable in its nature. You can't and should never\nmodify any files inside of it, `}<inlineCode parentName=\"p\">{`jb`}</inlineCode>{` will revert those changes on the next run anyway.`}</p>\n    <p>{`Nevertheless, it can sometimes become required to add changes there, e.g. if an\nupstream library contains a bug that needs to be fixed immediately, without\nwaiting for the upstream maintainer to review it.`}</p>\n    <h2 {...{\n      \"id\": \"shadowing\"\n    }}>{`Shadowing`}</h2>\n    <p>{`Because `}<a parentName=\"p\" {...{\n        \"href\": \"/libraries/import-paths\"\n      }}>{`import paths`}</a>{` are ranked in Tanka, you can use\na technique called shadowing: By putting a file with the exact same name in a\nhigher ranked path, Tanka will prefer that file instead of the original in\n`}<inlineCode parentName=\"p\">{`vendor`}</inlineCode>{`, which has the lowest possible rank of 1.`}</p>\n    <p>{`For example, if `}<inlineCode parentName=\"p\">{`/vendor/foo/bar.libsonnet`}</inlineCode>{` contained an error, you could create\n`}<inlineCode parentName=\"p\">{`/lib/foo/bar.libsonnet`}</inlineCode>{` and fix it there.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tip:`}</strong>{` Instead of copying the file to the new location and making the edits,\nuse an absolute import and `}<a parentName=\"p\" {...{\n          \"href\": \"/tutorial/environments#patching\"\n        }}>{`patching`}</a>{`:`}</p>\n      <pre parentName=\"blockquote\" {...{\n        \"className\": \"material-theme-darker vscode-highlight\",\n        \"data-language\": \"jsonnet\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"vscode-highlight-code\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"vscode-highlight-line\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk3 mtki\"\n            }}>{`// in /lib/foo/bar.libsonnet:`}</span></span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"vscode-highlight-line\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`(`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk4\"\n            }}>{`import`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk6\"\n            }}>{`\"../../vendor/foo/bar.libsonnet\"`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`) `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk12\"\n            }}>{`+`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"vscode-highlight-line\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`  `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk10\"\n            }}>{`foo+:`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"vscode-highlight-line\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`    `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk10\"\n            }}>{`bar:`}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{` `}</span><span parentName=\"span\" {...{\n              \"className\": \"mtk6\"\n            }}>{`\"fixed\"`}</span></span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"vscode-highlight-line\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`  }`}</span></span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"vscode-highlight-line\"\n          }}><span parentName=\"span\" {...{\n              \"className\": \"mtk1\"\n            }}>{`}`}</span></span></code></pre>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Important:`}</strong>{` If the file you override is not the one you directly import,\nbut instead imported by another file first, the override will only occur if\nthe placement of the file is alongside your `}<inlineCode parentName=\"p\">{`main.libsonnet`}</inlineCode>{`.  This is due to\nthe logic behind the Jsonnet importer.  Example:  We import\n`}<inlineCode parentName=\"p\">{`abc/main.libsonnet`}</inlineCode>{` located in `}<inlineCode parentName=\"p\">{`vendor/abc`}</inlineCode>{`.  Because Jsonnet first looks if\nfiles are locally present before considering the `}<a parentName=\"p\" {...{\n          \"href\": \"/libraries/import-paths\"\n        }}>{`import\npaths`}</a>{`, you need to make sure your override is\nactually picked up. In our example, you'd need to copy the `}<inlineCode parentName=\"p\">{`main.libsonnet`}</inlineCode>{`\ninto `}<inlineCode parentName=\"p\">{`lib/abc`}</inlineCode>{` as well.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"per-environment\"\n    }}>{`Per environment`}</h2>\n    <p>{`Another common case is overriding the entire `}<inlineCode parentName=\"p\">{`vendor`}</inlineCode>{` bundle per environment.`}</p>\n    <p>{`This is handy, when you for example want to test a change of an upstream\nlibrary which is used in many environments (including `}<inlineCode parentName=\"p\">{`prod`}</inlineCode>{`) in a single one,\nwithout affecting all the others.`}</p>\n    <p>{`For this, Tanka lets you have a separate `}<inlineCode parentName=\"p\">{`vendor`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`jsonnetfile.json`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`jsonnetfile.lock.json`}</inlineCode>{` per environment. To do so:`}</p>\n    <h4 {...{\n      \"id\": \"create-tkrcyaml\"\n    }}>{`Create `}<inlineCode parentName=\"h4\">{`tkrc.yaml`}</inlineCode></h4>\n    <p>{`Tanka normally uses the `}<inlineCode parentName=\"p\">{`jsonnetfile.json`}</inlineCode>{` from your project to find its root.\nAs we are going to create another one of that down the tree in the next step, we\nneed another marker for `}<inlineCode parentName=\"p\">{`<rootDir>`}</inlineCode>{`.`}</p>\n    <p>{`For that, create an empty file called `}<inlineCode parentName=\"p\">{`tkrc.yaml`}</inlineCode>{` in your project's root,\nalongside the original `}<inlineCode parentName=\"p\">{`jsonnetfile.json`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Info`}</strong>{`: While the name suggests that `}<inlineCode parentName=\"p\">{`tkrc.yaml`}</inlineCode>{` could be used for setting\nparameters, this is not the case yet.`}<br parentName=\"p\"></br>{`\n`}{`It might however be repurposed later, in case we need such functionality`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"add-a-vendor-to-your-environment\"\n    }}>{`Add a `}<inlineCode parentName=\"h4\">{`vendor`}</inlineCode>{` to your environment`}</h4>\n    <p>{`In your environments folder (e.g. `}<inlineCode parentName=\"p\">{`/environments/default`}</inlineCode>{`):`}</p>\n    <pre {...{\n      \"className\": \"material-theme-darker vscode-highlight\",\n      \"data-language\": \"bash\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk3 mtki\"\n          }}>{`# init jsonnet bundler (creates jsonnetfile.json)`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`$ jb init`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk3 mtki\"\n          }}>{`# install the updated dependency`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`$ jb init github.com/foo/bar@v2`}</span></span></code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tip`}</strong>{`: You don't need to install everything into the new `}<inlineCode parentName=\"p\">{`vendor/`}</inlineCode>{`, as\npackages not present there can still be imported from the global `}<inlineCode parentName=\"p\">{`/vendor`}</inlineCode>{`.`}</p>\n    </blockquote>\n\n    <style {...{\n      \"className\": \"vscode-highlight-styles\"\n    }}>{`\n  \n  .material-theme-darker {\nbackground-color: #212121;\ncolor: #EEFFFF;\n}\n\n.material-theme-darker .mtk1 { color: #FFFFFF; }\n.material-theme-darker .mtk2 { color: #212121; }\n.material-theme-darker .mtk3 { color: #545454; }\n.material-theme-darker .mtk4 { color: #F78C6C; }\n.material-theme-darker .mtk5 { color: #89DDFF; }\n.material-theme-darker .mtk6 { color: #C3E88D; }\n.material-theme-darker .mtk7 { color: #FFCB6B; }\n.material-theme-darker .mtk8 { color: #EEFFFF; }\n.material-theme-darker .mtk9 { color: #82AAFF; }\n.material-theme-darker .mtk10 { color: #FF5370; }\n.material-theme-darker .mtk11 { color: #F07178; }\n.material-theme-darker .mtk12 { color: #C792EA; }\n.material-theme-darker .mtk13 { color: #EEFFFF90; }\n.material-theme-darker .mtk14 { color: #65737E; }\n.material-theme-darker .mtk15 { color: #B2CCD6; }\n.material-theme-darker .mtk16 { color: #C17E70; }\n.material-theme-darker .mtki { font-style: italic; }\n.material-theme-darker .mtkb { font-weight: bold; }\n.material-theme-darker .mtku { text-decoration: underline; text-underline-position: under; }\n`}</style>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}